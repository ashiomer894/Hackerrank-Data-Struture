import java.util.*;
import java.io.*;

class Node {
    Node left;
    Node right;
    int data;
    
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class Solution {

/* you only have to complete the function given below.  
Node is defined as  

class Node {
    int data;
    Node left;
    Node right;
}

*/

    public static void inOrder(Node root) {
Node cur = root;
        while(cur != null){
            if(cur.left != null){
                // Find in-order predecessor of cur
                Node curPredecessor = cur.left;
                while(curPredecessor.right != null && curPredecessor.right != cur){
                    curPredecessor = curPredecessor.right;
                }
                // curPredecessor now indeed is the predecessor of cur
                if(curPredecessor.right == null){
                    // Thread curPredecessor back to cur (to "remember" it without a stack)
                    curPredecessor.right = cur;
                    // "Recur" to left
                    cur = cur.left;

                } else {
                    System.out.print(cur.data + " ");
                    // "Recur" to right
                    cur = cur.right;
                }

            } else {
                System.out.print(cur.data + " ");
                // "Recur" to right
                cur = cur.right;
            }
        }
    }

	public static Node insert(Node root, int data) {
        if(root == null) {
            return new Node(data);
        } else {
            Node cur;
            if(data <= root.data) {
                cur = insert(root.left, data);
                root.left = cur;
            } else {
                cur = insert(root.right, data);
                root.right = cur;
            }
            return root;
        }
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int t = scan.nextInt();
        Node root = null;
        while(t-- > 0) {
            int data = scan.nextInt();
            root = insert(root, data);
        }
        scan.close();
        inOrder(root);
    }	
}
